@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable

<div
    @onmousedown="@HandleMouseDown"
    @onclick="@HandleClick"
    role="button"
    class="square"
    style="position: absolute; @ColorStyle @PositionStyle">
</div>

@code {
    
    [CascadingParameter]
    public BoxArea BoxArea { get; set; }
    
    [Parameter]
    public string Id { get; set; }
    
    [Parameter]
    public CoreHub CoreHub { get; set; }
    
    private float _hueDegrees = 0;
    private string ColorStyle => $"background-color: hsl({_hueDegrees}deg, 100%, 50%);";

    private Timer _colorTimer;
    private Timer _physicsTimer;

    private Timer _networkTimer;
    
    private string PositionStyle => $"left: {_posX}px; top: {_posY}px;";
    
    private float _posX = 0f;
    private float _posY = 0f;
    
    private float _velX = 0f;
    private float _velY = 0f;

    const float Gravity = 1f;
    const int SquareSize = 100;

    /// <summary>
    /// True if the user is currently dragging the square.
    /// </summary>
    private bool _isDragging = false;

    protected override void OnInitialized()
    {
        if (Id != CoreHub.Id)
            return;

        _networkTimer = new Timer(
            HandleNetworkTimerFire,
            null,
            TimeSpan.FromMilliseconds(100),
            TimeSpan.FromMilliseconds(100)
        );
        
        BoxArea.OnMouseUp += HandleMouseUp;
        
        _physicsTimer = new Timer(
            HandlePhysicsTimerFire,
            null,
            TimeSpan.FromMilliseconds(20),
            TimeSpan.FromMilliseconds(20)
        );
    }

    private void SetupTimer()
    {
        _colorTimer = new Timer(
            HandleTimerFire,
            null,
            TimeSpan.FromMilliseconds(100),
            TimeSpan.FromMilliseconds(100)
        );
    }

    private void DestroyTimer()
    {
        _colorTimer.Dispose();
        _colorTimer = null;
    }

    private void HandleTimerFire(object state)
    {
        _hueDegrees += 1f;
        StateHasChanged();
    }

    private void HandleClick()
    {
        if (_colorTimer is null)
        {
            SetupTimer();
        }
        else
        {
            DestroyTimer();
        }
    }

    private void HandleMouseDown()
    {
        if (Id != CoreHub.Id)
            return;
        
        _isDragging = true;
        BoxArea.OnMouseMove += HandleMouseMove;
    }

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        if (Id != CoreHub.Id)
            return;
        
        if (!_isDragging)
        {
            return;
        }

        _posX += (float)e.MovementX;
        _posY += (float)e.MovementY;
        
        StateHasChanged();
    }

    private async Task HandleMouseUp(MouseEventArgs e)
    {
        if (Id != CoreHub.Id)
            return;
        
        _isDragging = false;
        BoxArea.OnMouseMove -= HandleMouseMove;
        
        _velX += BoxArea.MouseVelX  * 2f;
        _velY -= BoxArea.MouseVelY * 2f;
    }

    public void Dispose()
    {
        BoxArea.OnMouseUp -= HandleMouseUp;
    }

    public struct CollisionState
    {
        public bool CollidedX;
        public bool CollidedY;
    }
    
    // Physics //
    private bool _lastCollide = false;
    private void HandlePhysicsTimerFire(object state)
    {
        if (_isDragging)
            return;
        
        _velY -= Gravity;
        
        _posX += _velX;
        _posY -= _velY;

        var cState = CheckCollisions();
        if (cState.CollidedX)
        {
            _velX *= -0.8f;
        }
        if (cState.CollidedY)
        {
            _velY *= -0.8f;
        }

        if (!_lastCollide && (cState.CollidedX || cState.CollidedY))
        {
            BoxArea.PlayBounceSound();    
        }
        
        _lastCollide = cState.CollidedX || cState.CollidedY;
        
        StateHasChanged();
    }

    private CollisionState CheckCollisions()
    {
        var worldHeight = BoxArea.HeightPx;
        var worldWidth = BoxArea.WidthPx;
        
        bool collidedX = false;
        bool collidedY = false;

        if (_posX < 0)
        {
            _posX = 0;
            collidedX = true;
        }  
        else if (_posX > worldWidth - SquareSize)
        {
            _posX = worldWidth - SquareSize;
            collidedX = true;
        }

        if (_posY < 0)
        {
            _posY = 0;
            collidedY = true;
        } 
        else if (_posY > worldHeight - SquareSize)
        {
            _posY = worldHeight - SquareSize;
            collidedY = true;
        }

        return new CollisionState()
        {
            CollidedX = collidedX,
            CollidedY = collidedY
        };
    }
    
    public void SetPosition(float x, float y)
    {
        _posX = x;
        _posY = y;
        
        StateHasChanged();
    }

    private async void HandleNetworkTimerFire(object state)
    {
        if (CoreHub.Hub.State != HubConnectionState.Connected)
            return;
        
        await CoreHub.Hub.InvokeAsync("SendBallPosition", _posX, _posY);
    }
}