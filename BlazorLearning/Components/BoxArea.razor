@using BlazorLearning.Utility
@inject IJSRuntime JsRuntime

<CascadingValue Value="@this">
    <div
        @ref="@_ref"
        @onmousemove="@HandleMouseMove"
        @onmouseup="@HandleMouseUp"
        class="box-area"
        style="position: relative; width: @(WidthPx)px; height: @(HeightPx)px"
    >
        @ChildContent
    </div>
</CascadingValue>

@code {
    public event Func<Task> OnMouseUp;
    public event Func<MouseEventArgs, Task> OnMouseMove; 

    private ElementReference _ref;
    
    [Parameter] 
    public int WidthPx { get; set; } = 500;

    [Parameter] 
    public int HeightPx { get; set; } = 500;
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private ElementPosition _position;

    private IJSObjectReference _jsModule;

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        // Console.WriteLine($"x:{e.ClientX - _position.ClientX} y:{e.ClientY - _position.ClientY}");
        
        if (OnMouseMove is not null)
            await OnMouseMove.Invoke(e);
    }
    
    private async Task HandleMouseUp()
    {
        if (OnMouseUp is not null)
            await OnMouseUp.Invoke();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.
                InvokeAsync<IJSObjectReference>(
                    "import", 
                    "./Components/BoxArea.razor.js"
                );

            _position = await _jsModule.InvokeAsync<ElementPosition>("getPosition", _ref);
            // Console.WriteLine($"Position: x {_position.ClientX} y {_position.ClientY}");
        }
    }

}